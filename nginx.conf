
    # user www www;
pid tmp/dev-nginx.pid;

# This number should be at maxium the number of CPU on the server
worker_processes 4;

events {
    # Number of connections per worker
    worker_connections 4096;
}

http {
    sendfile on;
    include ./mime.types;

    lua_package_path "./app/?.lua;./?.lua;/usr/local/lor/?.lua;;";
    lua_code_cache off;
    resolver 127.0.0.1;

     upstream search {
         server 180.149.132.47;
     }
     upstream manageserver {
        server 0.0.0.1;   # just an invalid address as a place holder

        balancer_by_lua_block {
            local balancer = require "ngx.balancer"

            -- well, usually we calculate the peer's host and port
            -- according to some balancing policies instead of using
            -- hard-coded values like below
            local host = "127.0.0.1"
            local port = 8888

            local ok, err = balancer.set_current_peer(host, port)
            if not ok then
                ngx.log(ngx.ERR, "failed to set the current peer: ", err)
                return ngx.exit(500)
            end
        }

        keepalive 10;  # connection pool
     }
    server {
        # List port
        listen 9999;
        server_name wyc.com;
        # Access log
        access_log logs/dev-access.log;

        # Error log
        error_log logs/dev-error.log;

        # this variable is for view renderï¼ˆlua-resty-template)
        set $template_root '';

        location /static {
            alias ./app/static; #app/static;
        }

        # lor runtime
        location / {
            content_by_lua_file ./app/main.lua;
        }

        location /aa {
            content_by_lua_block{
                local producer = require "resty.kafka.producer"

                local broker_list = {
                  { host = "127.0.0.1", port = 9092 },
                }

                local key = "test"
                local message = "hello world"

                local p = producer:new(broker_list,{ producer_type = "async" })

                local size, err = p:send("wyc", nil, message)
                if not size then
                  ngx.say("send1 err:", err)
                  return
                end
            }
        }
        location /test {
            content_by_lua_block {
             local cjson =  require "cjson"
             local data = {uri = "/test",time = ngx.time(),request_uri = ngx.var.request_uri}
             ngx.say(cjson.encode(data))
         }
        }
        location /test/aaa {
            content_by_lua_block {
             local cjson =  require "cjson"
             local data = {uri = "/test/aaa",time = ngx.time(),request_uri = ngx.var.request_uri}
             ngx.say(cjson.encode(data))
         }
        }
        location /test/aaa/bbb {
            content_by_lua_block {
             local cjson =  require "cjson"
             local data = {uri = "/test/aaa/bbb",time = ngx.time(),request_uri = ngx.var.request_uri}
             ngx.say(cjson.encode(data))
         }
        }
        location /ttt {
            access_by_lua_file /Users/wyc/project/lordemo/file_log_access.lua;
            proxy_pass http://wyc.com:9999/test;
            body_filter_by_lua_file /Users/wyc/project/lordemo/file_log_body_filter.lua;
            log_by_lua_file /Users/wyc/project/lordemo/file_log_log.lua;
        }
        }
    }

}
    

